apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    signingConfigs {
        debug
        release
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
    }
    defaultConfig {
        applicationId "id.atumdev.mapdemo"
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                //noinspection GroovyAssignabilityCheck
                output.outputFile = new File(
                        output.outputFile.parent,
                        output.outputFile.name.replace(".apk", "-${variant.applicationId}-${variant.versionName}.apk"))
            }
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),  'proguard-rules.pro'
            zipAlignEnabled true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.google.android.gms:play-services-maps:8.4.0'
}

def keyStoreDirPath = (new File(System.getProperty('user.home')).getAbsolutePath()) + '/keystoreandroid/atumdev/'
def keyStoreFile = new File(keyStoreDirPath + 'atumdev.keystore')
def Properties props = new Properties()
def propFile = new File(keyStoreDirPath + 'atumdev.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_PASSWORD') &&
            props.containsKey('KEY_ALIAS')) {
        android.signingConfigs.release.storeFile = keyStoreFile
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']

        android.signingConfigs.debug.storeFile = keyStoreFile
        android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.debug.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.debug.keyPassword = props['KEY_PASSWORD']

    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
        android.buildTypes.debug.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
    android.buildTypes.debug.signingConfig = null
}
